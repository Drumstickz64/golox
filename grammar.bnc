program          -> declaration* EOF ;

declaration      -> classDeclaration
                  | funDeclaration
                  | varDeclaration
                  | statement ;

classDeclaration -> "class" IDENTIFIER ( < IDENTIFIER )? "{ *function "}" ;

funDeclaration   -> "fun" function ;
function         -> IDENTIFIER "(" parameters? ")" block ;
parameters       -> IDENTIFIER ( "," IDENTIFIER )* ;

varDeclaration   -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement        -> exprStmt
                  | ifStmt
                  | printStmt
                  | returnStmt
                  | whileStmt
                  | forStmt
                  | block ;

block            -> "{" declaration* "}" ;

forStmt          -> "for" "(" ( varDeclaration   | expression )? ";"
                  expression? ";"
                  expression? ")" statement ;

whileStmt        -> "while" "(" expression ")" statement ;

ifStmt           -> "if" "(" expression ")" statement
                  ( "else" statement )? ;

exprStmt         -> expression ";" ;

printStmt        -> "print" expression ";" ;

returnStmt       -> "return" expression? ";" ;

expression       -> assignment ;
assignment       -> ( call "." )? IDENTIFIER "=" expression
                  | logical_or;

logical_or       -> logical_and ( "or" logical_and )* ;
logical_and      -> equality ( "and" equality )* ;

equality         -> comparison ( ( "!="   | "==" ) comparison )* ;
comparison       -> term ( ( ">"   | ">="   | "<"   | "<=" ) term )* ;
term             -> factor ( ( "-"   | "+" ) factor )* ;
factor           -> unary ( ( "/"   | "*" ) unary )* ;
unary            -> ( "!"   | "-" ) unary
                  | call ;
call             -> primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments        -> expression ( "," expression )* ;
primary          -> NUMBER   | STRING
                  | "true"   | "false"   | "nil"
                  | "(" expression ")"
                  | IDENTIFIER ;